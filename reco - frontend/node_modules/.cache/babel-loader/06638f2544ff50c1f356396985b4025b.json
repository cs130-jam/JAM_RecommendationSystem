{"ast":null,"code":"const API_BASE_URL = \"http://localhost/api/\";\n\nconst API_CALL_URL = (...path) => API_BASE_URL + path.join(\"/\");\n\n_c = API_CALL_URL;\n\nconst API_QUERY_PARAMS = (url, params) => url + \"?\" + new URLSearchParams(params); // import { apiUrl } from './util/request';\n// import useCookie from './util/useCookie';\n// const WEBSOCKET_URL = \"ws://localhost:8080/api/ws/jam\";\n// function App() {\n//     const [sessionToken, setSessionToken, removeSessionToken] = useCookie(SESSION_TOKEN_KEY);\n//     let ws = useRef(null);\n//     function fetchWithToken(url, info) {\n//         const headersWithToken = \"headers\" in info ? info.headers : {};\n//         headersWithToken[SESSION_TOKEN_KEY] = sessionToken;\n//         info.headers = headersWithToken;\n//         return fetch(url, info).then(res => {\n//             if (res.ok) {\n//                 return res;\n//             } else {\n//                 if (res.status === 401) removeSessionToken();\n//                 return Promise.reject(res);\n//             }\n//         });\n//     }\n//     function makeWebsocket(sessionToken) {\n//         const ws = new WebSocket(WEBSOCKET_URL);\n//         ws.onopen = () => {\n//             ws.send(sessionToken);\n//         }\n//         ws.onmessage = message => console.log(message);\n//         ws.onerror = console.error;\n//         return ws;\n//     }\n\n\n_c2 = API_QUERY_PARAMS;\n\nclass JamAPIService {\n  constructor(sessionToken, removeSessionToken) {\n    this.removeSessionToken = removeSessionToken;\n    this.sessionToken = sessionToken;\n  }\n\n  login(data) {\n    return fetch(API_CALL_URL(\"internal\", \"login\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n  }\n\n  signup(data) {\n    return fetch(API_CALL_URL(\"internal\", \"signup\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n  }\n\n  existingUser(username) {\n    return fetch(API_QUERY_PARAMS(API_CALL_URL(\"internal\", \"user\"), {\n      \"username\": username\n    }));\n  }\n\n  getInstruments() {\n    return fetch(API_CALL_URL(\"user\", \"choices\", \"instruments\"));\n  }\n\n  findArtists(query, page) {\n    return fetch(API_QUERY_PARAMS(API_CALL_URL(\"artist\", \"search\"), {\n      \"artist\": query,\n      \"page\": page\n    }), {\n      method: \"GET\",\n      headers: {\n        \"Accept\": \"application/json\"\n      }\n    });\n  }\n\n  test() {\n    return fetch(API_CALL_URL(\"test\", \"user\", \"random\"), {\n      method: \"GET\",\n      headers: {\n        \"Accept\": \"application/json\"\n      }\n    });\n  }\n\n}\n\nexport default JamAPIService;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"API_CALL_URL\");\n$RefreshReg$(_c2, \"API_QUERY_PARAMS\");","map":{"version":3,"sources":["/Users/soniajaiswal/IdeaProjects/JAM/jam-frontend/src/services/jamService.js"],"names":["API_BASE_URL","API_CALL_URL","path","join","API_QUERY_PARAMS","url","params","URLSearchParams","JamAPIService","constructor","sessionToken","removeSessionToken","login","data","fetch","method","headers","body","JSON","stringify","signup","existingUser","username","getInstruments","findArtists","query","page","test"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAArB;;AAEA,MAAMC,YAAY,GAAG,CAAC,GAAGC,IAAJ,KAAaF,YAAY,GAAGE,IAAI,CAACC,IAAL,CAAU,GAAV,CAAjD;;KAAMF,Y;;AACN,MAAMG,gBAAgB,GAAG,CAACC,GAAD,EAAMC,MAAN,KAAiBD,GAAG,GAAG,GAAN,GAAY,IAAIE,eAAJ,CAAoBD,MAApB,CAAtD,C,CAGA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;MApCMF,gB;;AAsCN,MAAMI,aAAN,CAAoB;AAChBC,EAAAA,WAAW,CAACC,YAAD,EAAeC,kBAAf,EAAmC;AAC1C,SAAKA,kBAAL,GAA0BA,kBAA1B;AACA,SAAKD,YAAL,GAAoBA,YAApB;AACH;;AAEDE,EAAAA,KAAK,CAACC,IAAD,EAAO;AACR,WAAOC,KAAK,CAACb,YAAY,CAAC,UAAD,EAAa,OAAb,CAAb,EAAoC;AAC5Cc,MAAAA,MAAM,EAAE,MADoC;AAE5CC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,kBAAU;AAFL,OAFmC;AAM5CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AANsC,KAApC,CAAZ;AAQH;;AAEDO,EAAAA,MAAM,CAACP,IAAD,EAAO;AACT,WAAOC,KAAK,CAACb,YAAY,CAAC,UAAD,EAAa,QAAb,CAAb,EAAqC;AAC7Cc,MAAAA,MAAM,EAAE,MADqC;AAE7CC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,kBAAU;AAFL,OAFoC;AAM7CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AANuC,KAArC,CAAZ;AAQH;;AAEDQ,EAAAA,YAAY,CAACC,QAAD,EAAW;AACnB,WAAOR,KAAK,CAACV,gBAAgB,CAACH,YAAY,CAAC,UAAD,EAAa,MAAb,CAAb,EAAmC;AAC5D,kBAAYqB;AADgD,KAAnC,CAAjB,CAAZ;AAGH;;AAEDC,EAAAA,cAAc,GAAG;AACb,WAAOT,KAAK,CAACb,YAAY,CAAC,MAAD,EAAS,SAAT,EAAoB,aAApB,CAAb,CAAZ;AACH;;AAEDuB,EAAAA,WAAW,CAACC,KAAD,EAAQC,IAAR,EAAc;AACrB,WAAOZ,KAAK,CAACV,gBAAgB,CAACH,YAAY,CAAC,QAAD,EAAW,QAAX,CAAb,EAAmC;AAC5D,gBAAUwB,KADkD;AAE5D,cAAQC;AAFoD,KAAnC,CAAjB,EAIZ;AACIX,MAAAA,MAAM,EAAE,KADZ;AAEIC,MAAAA,OAAO,EAAE;AACL,kBAAU;AADL;AAFb,KAJY,CAAZ;AAUH;;AAEDW,EAAAA,IAAI,GAAG;AACH,WAAOb,KAAK,CAACb,YAAY,CAAC,MAAD,EAAS,MAAT,EAAiB,QAAjB,CAAb,EAAyC;AACjDc,MAAAA,MAAM,EAAE,KADyC;AAEjDC,MAAAA,OAAO,EAAE;AACL,kBAAU;AADL;AAFwC,KAAzC,CAAZ;AAMH;;AA1De;;AA4DpB,eAAeR,aAAf","sourcesContent":["const API_BASE_URL = \"http://localhost/api/\";\n\nconst API_CALL_URL = (...path) => API_BASE_URL + path.join(\"/\");\nconst API_QUERY_PARAMS = (url, params) => url + \"?\" + new URLSearchParams(params);\n\n\n// import { apiUrl } from './util/request';\n// import useCookie from './util/useCookie';\n\n// const WEBSOCKET_URL = \"ws://localhost:8080/api/ws/jam\";\n\n// function App() {\n//     const [sessionToken, setSessionToken, removeSessionToken] = useCookie(SESSION_TOKEN_KEY);\n//     let ws = useRef(null);\n\n//     function fetchWithToken(url, info) {\n//         const headersWithToken = \"headers\" in info ? info.headers : {};\n//         headersWithToken[SESSION_TOKEN_KEY] = sessionToken;\n//         info.headers = headersWithToken;\n\n//         return fetch(url, info).then(res => {\n//             if (res.ok) {\n//                 return res;\n//             } else {\n//                 if (res.status === 401) removeSessionToken();\n//                 return Promise.reject(res);\n//             }\n//         });\n//     }\n\n//     function makeWebsocket(sessionToken) {\n//         const ws = new WebSocket(WEBSOCKET_URL);\n//         ws.onopen = () => {\n//             ws.send(sessionToken);\n//         }\n//         ws.onmessage = message => console.log(message);\n//         ws.onerror = console.error;\n    \n//         return ws;\n//     }\n\nclass JamAPIService {\n    constructor(sessionToken, removeSessionToken) {\n        this.removeSessionToken = removeSessionToken;\n        this.sessionToken = sessionToken;\n    }\n\n    login(data) {\n        return fetch(API_CALL_URL(\"internal\", \"login\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n    }\n\n    signup(data) {\n        return fetch(API_CALL_URL(\"internal\", \"signup\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n    }\n\n    existingUser(username) {\n        return fetch(API_QUERY_PARAMS(API_CALL_URL(\"internal\", \"user\"), {\n            \"username\": username\n        }));\n    }\n\n    getInstruments() {\n        return fetch(API_CALL_URL(\"user\", \"choices\", \"instruments\"));\n    }\n\n    findArtists(query, page) {\n        return fetch(API_QUERY_PARAMS(API_CALL_URL(\"artist\", \"search\"), {\n            \"artist\": query,\n            \"page\": page\n        }),\n        {\n            method: \"GET\",\n            headers: {\n                \"Accept\": \"application/json\"\n            },\n        });\n    }\n\n    test() {\n        return fetch(API_CALL_URL(\"test\", \"user\", \"random\"), {\n            method: \"GET\",\n            headers: {\n                \"Accept\": \"application/json\"\n            },\n        });\n    }\n}\nexport default JamAPIService;"]},"metadata":{},"sourceType":"module"}